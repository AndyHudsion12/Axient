import heapq

class Grid:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.obstacles = set()  # Coordinates of obstacles (if any)

    def add_obstacle(self, x, y):
        self.obstacles.add((x, y))

    def is_valid(self, x, y):
        return 0 <= x < self.width and 0 <= y < self.height and (x, y) not in self.obstacles

class Node:
    def __init__(self, x, y, parent=None):
        self.x = x
        self.y = y
        self.parent = parent
        self.g = 0  # Cost from start to current node
        self.h = 0  # Heuristic (estimated cost from current node to goal)

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

def heuristic(node, goal):
    return abs(node.x - goal.x) + abs(node.y - goal.y)

def reconstruct_path(current_node):
    path = []
    while current_node is not None:
        path.append((current_node.x, current_node.y))
        current_node = current_node.parent
    return path[::-1]

def astar(grid, start, goal):
    open_list = []
    closed_set = set()

    start_node = Node(start[0], start[1])
    goal_node = Node(goal[0], goal[1])

    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if (current_node.x, current_node.y) == (goal_node.x, goal_node.y):
            return reconstruct_path(current_node)

        closed_set.add((current_node.x, current_node.y))

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Movement allowed in 4 directions
            neighbor_x, neighbor_y = current_node.x + dx, current_node.y + dy

            if not grid.is_valid(neighbor_x, neighbor_y) or (neighbor_x, neighbor_y) in closed_set:
                continue

            neighbor_node = Node(neighbor_x, neighbor_y, current_node)
            neighbor_node.g = current_node.g + 1  # Assuming each move costs 1

            neighbor_node.h = heuristic(neighbor_node, goal_node)

            if neighbor_node not in open_list:
                heapq.heappush(open_list, neighbor_node)

    return None  # No path found

# Example usage:
if __name__ == "__main__":
    grid = Grid(5, 5)
    grid.add_obstacle(2, 1)
    grid.add_obstacle(2, 2)

    start = (0, 0)
    goal = (4, 4)

    path = astar(grid, start, goal)

    if path:
        print("Path found:")
        print(path)
    else:
        print("No path found.")