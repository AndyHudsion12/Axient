from flask import Flask, render_template, request, redirect, url_for, session
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # Replace with a secure secret key


# Simulated database of users (in practice, use a database like SQLite or others)
users = {
    'admin': {'password': 'admin', 'role': 'admin'},
    'user1': {'password': 'user1', 'role': 'user'},
    'user2': {'password': 'user2', 'role': 'user'}
}

# Simulated list of multiplayer servers
servers = [
    {'name': 'Server A', 'status': 'Running'},
    {'name': 'Server B', 'status': 'Stopped'},
    {'name': 'Server C', 'status': 'Running'}
]


# Login required decorator
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session:
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function


# Routes
@app.route('/')
@login_required
def home():
    return render_template('home.html', username=session['username'], servers=servers)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and users[username]['password'] == password:
            session['username'] = username
            return redirect(url_for('home'))
        else:
            return render_template('login.html', error='Invalid credentials')
    return render_template('login.html', error=None)


@app.route('/logout')
@login_required
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))


# Server management routes (for admin only)
@app.route('/admin/servers')
@login_required
def manage_servers():
    if users[session['username']]['role'] != 'admin':
        return redirect(url_for('home'))
    return render_template('manage_servers.html', servers=servers)


@app.route('/admin/server/<int:index>/start')
@login_required
def start_server(index):
    if users[session['username']]['role'] != 'admin':
        return redirect(url_for('home'))
    servers[index]['status'] = 'Running'
    return redirect(url_for('manage_servers'))


@app.route('/admin/server/<int:index>/stop')
@login_required
def stop_server(index):
    if users[session['username']]['role'] != 'admin':
        return redirect(url_for('home'))
    servers[index]['status'] = 'Stopped'
    return redirect(url_for('manage_servers'))


if __name__ == '__main__':
    app.run(debug=True)

from flask import Flask, request, jsonify

app = Flask(__name__)

# Simulated database of players
players = [
    {'id': 1, 'name': 'Alice', 'friends': []},
    {'id': 2, 'name': 'Bob', 'friends': []},
    {'id': 3, 'name': 'Charlie', 'friends': []}
]

# Endpoint to get all players
@app.route('/players', methods=['GET'])
def get_players():
    return jsonify(players), 200

# Endpoint to get a specific player
@app.route('/players/<int:player_id>', methods=['GET'])
def get_player(player_id):
    player = next((p for p in players if p['id'] == player_id), None)
    if player:
        return jsonify(player), 200
    else:
        return jsonify({'error': 'Player not found'}), 404

# Endpoint to add a new player
@app.route('/players', methods=['POST'])
def add_player():
    new_player = request.json
    new_player['id'] = len(players) + 1  # Assign new ID
    new_player['friends'] = []  # Initialize empty friends list
    players.append(new_player)
    return jsonify(new_player), 201

# Endpoint to update a player's information
@app.route('/players/<int:player_id>', methods=['PUT'])
def update_player(player_id):
    player = next((p for p in players if p['id'] == player_id), None)
    if player:
        data = request.json
        player.update(data)
        return jsonify(player), 200
    else:
        return jsonify({'error': 'Player not found'}), 404

# Endpoint to add a friend for a player
@app.route('/players/<int:player_id>/add_friend/<int:friend_id>', methods=['PUT'])
def add_friend(player_idâ¬¤

